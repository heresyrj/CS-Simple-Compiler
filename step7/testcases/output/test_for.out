;IR code
;LABEL main
;LINK
;STOREF 7.0 $T1
;STOREF $T1 num
;STOREI 1 $T2
;STOREI $T2 j
;STOREF num approx
;STOREI 100 $T3
;STOREI $T3 i
;LABEL label1
;STOREI 0 $T4
;EQ i $T4 label3
;STOREF 0.5 $T7
;DIVF num approx $T8
;ADDF approx $T8 $T9
;MULTF $T7 $T9 $T10
;STOREF $T10 newapprox
;STOREF newapprox approx
;LABEL label2
;STOREI 1 $T5
;SUBI i $T5 $T6
;STOREI $T6 i
;JUMP label1
;LABEL label3
;WRITEF approx
;RET

;tiny code
var i
var j
var newapprox
var approx
var num
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;LABEL main	 live vars: 
label main
;LINK	 live vars: 
link 10
;STOREF 7.0 $T1	 live vars: $T1, 
;ensure(): $T1 gets register r3 { r0->null r1->null r2->null r3->$T1 }
move 7.0 r3
;STOREF $T1 num	 live vars: num, 
;ensure(): $T1 has register r3 { r0->null r1->null r2->null r3->$T1 }
;ensure(): num gets register r2 { r0->null r1->null r2->num r3->$T1 }
move r3 r2
;Freeing unused variable $T1
;Spilling variable: $T1
move r3 $-1
;STOREI 1 $T2	 live vars: $T2, num, 
;ensure(): $T2 gets register r3 { r0->null r1->null r2->num r3->$T2 }
move 1 r3
;STOREI $T2 j	 live vars: num, 
;ensure(): $T2 has register r3 { r0->null r1->null r2->num r3->$T2 }
;ensure(): j gets register r1 { r0->null r1->j r2->num r3->$T2 }
move r3 r1
;Freeing unused variable $T2
;Spilling variable: $T2
move r3 $-2
;Freeing unused variable j
;Spilling variable: j
move r1 j
;STOREF num approx	 live vars: approx, num, 
;ensure(): num has register r2 { r0->null r1->null r2->num r3->null }
;ensure(): approx gets register r3 { r0->null r1->null r2->num r3->approx }
move r2 r3
;STOREI 100 $T3	 live vars: $T3, approx, num, 
;ensure(): $T3 gets register r1 { r0->null r1->$T3 r2->num r3->approx }
move 100 r1
;STOREI $T3 i	 live vars: i, approx, num, 
;ensure(): $T3 has register r1 { r0->null r1->$T3 r2->num r3->approx }
;ensure(): i gets register r0 { r0->i r1->$T3 r2->num r3->approx }
move r1 r0
;Freeing unused variable $T3
;Spilling variable: $T3
move r1 $-3
;Spilling registers at the end of the Basic Block
;Spilling variable: approx
move r3 approx
;Spilling variable: num
move r2 num
;Spilling variable: i
move r0 i
;LABEL label1	 live vars: i, approx, num, 
label label1
;STOREI 0 $T4	 live vars: i, $T4, approx, num, 
;ensure(): $T4 gets register r3 { r0->null r1->null r2->null r3->$T4 }
move 0 r3
;EQ i $T4 label3	 live vars: approx, num, i, 
;ensure(): i gets register r2 { r0->null r1->null r2->i r3->$T4 }
;loading i to register r2
move i r2
;ensure(): $T4 has register r3 { r0->null r1->null r2->i r3->$T4 }
cmpi r2 r3
;Freeing unused variable $T4
;Spilling variable: $T4
move r3 $-4
;Spilling registers at the end of the Basic Block
jeq label3
;STOREF 0.5 $T7	 live vars: num, approx, $T7, i, 
;ensure(): $T7 gets register r3 { r0->null r1->null r2->null r3->$T7 }
move 0.5 r3
;DIVF num approx $T8	 live vars: approx, $T8, $T7, i, num, 
;ensure(): num gets register r2 { r0->null r1->null r2->num r3->$T7 }
;loading num to register r2
move num r2
;ensure(): approx gets register r1 { r0->null r1->approx r2->num r3->$T7 }
;loading approx to register r1
move approx r1
;Switching owner of register r2 to $T8 { r0->null r1->approx r2->num r3->$T7 }
divr r1 r2
;ADDF approx $T8 $T9	 live vars: $T7, $T9, i, num, 
;ensure(): approx has register r1 { r0->null r1->approx r2->$T8 r3->$T7 }
;ensure(): $T8 has register r2 { r0->null r1->approx r2->$T8 r3->$T7 }
;Switching owner of register r1 to $T9 { r0->null r1->approx r2->$T8 r3->$T7 }
addr r2 r1
;Freeing unused variable $T8
;Spilling variable: $T8
move r2 $-8
;MULTF $T7 $T9 $T10	 live vars: $T10, i, num, 
;ensure(): $T7 has register r3 { r0->null r1->$T9 r2->null r3->$T7 }
;ensure(): $T9 has register r1 { r0->null r1->$T9 r2->null r3->$T7 }
;Switching owner of register r3 to $T10 { r0->null r1->$T9 r2->null r3->$T7 }
;Spilling variable: $T7
move r3 $-7
mulr r1 r3
;Freeing unused variable $T9
;Spilling variable: $T9
move r1 $-9
;STOREF $T10 newapprox	 live vars: newapprox, i, num, 
;ensure(): $T10 has register r3 { r0->null r1->null r2->null r3->$T10 }
;ensure(): newapprox gets register r2 { r0->null r1->null r2->newapprox r3->$T10 }
move r3 r2
;Freeing unused variable $T10
;Spilling variable: $T10
move r3 $-10
;STOREF newapprox approx	 live vars: i, approx, num, 
;ensure(): newapprox has register r2 { r0->null r1->null r2->newapprox r3->null }
;ensure(): approx gets register r3 { r0->null r1->null r2->newapprox r3->approx }
move r2 r3
;Freeing unused variable newapprox
;Spilling variable: newapprox
move r2 newapprox
;LABEL label2	 live vars: i, approx, num, 
label label2
;STOREI 1 $T5	 live vars: i, $T5, approx, num, 
;ensure(): $T5 gets register r2 { r0->null r1->null r2->$T5 r3->approx }
move 1 r2
;SUBI i $T5 $T6	 live vars: $T6, approx, num, 
;ensure(): i gets register r1 { r0->null r1->i r2->$T5 r3->approx }
;loading i to register r1
move i r1
;ensure(): $T5 has register r2 { r0->null r1->i r2->$T5 r3->approx }
;Switching owner of register r1 to $T6 { r0->null r1->i r2->$T5 r3->approx }
subi r2 r1
;Freeing unused variable $T5
;Spilling variable: $T5
move r2 $-5
;STOREI $T6 i	 live vars: i, approx, num, 
;ensure(): $T6 has register r1 { r0->null r1->$T6 r2->null r3->approx }
;ensure(): i gets register r2 { r0->null r1->$T6 r2->i r3->approx }
move r1 r2
;Freeing unused variable $T6
;Spilling variable: $T6
move r1 $-6
;JUMP label1	 live vars: i, approx, num, 
;Spilling registers at the end of the Basic Block
;Spilling variable: approx
move r3 approx
;Spilling variable: i
move r2 i
jmp label1
;LABEL label3	 live vars: approx, 
label label3
;WRITEF approx	 live vars: 
;ensure(): approx gets register r3 { r0->null r1->null r2->null r3->approx }
;loading approx to register r3
move approx r3
sys writer r3
;Freeing unused variable approx
;RET	 live vars: 
unlnk
ret
;Spilling registers at the end of the Basic Block
end
