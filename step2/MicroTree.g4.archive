tree grammar MicroTree;

options {
// We're going to process an AST whose nodes are of type CommonTree.
	ASTLabelType = CommonTree;
// We're going to use the tokens defined in
// both our MathLexer and MathParser grammars.
// The MathParser grammar already includes
// the tokens defined in the MathLexer grammar.
	tokenVocab = MicroParser;
}

@header { 
	import java.util.Map;
	import java.util.TreeMap;
}

// We want to add some fields and methods to the generated class.
@members {

	// We're using TreeMaps so the entries are sorted on their keys
 	// which is desired when listing them.
	private Map<String, Function> functionMap = new TreeMap<String, Function>();
	private Map<String, Double> variableMap = new TreeMap<String, Double>();
  	// This adds a Function to our function Map.
	private void define(Function function) {
		functionMap.put(function.getName(), function);
	}

  	// This retrieves a Function from our function Map
	// whose name matches the text of a given AST tree node.
	private Function getFunction(CommonTree nameNode) 
	{
		String name = nameNode.getText();
		Function function = functionMap.get(name);
		if (function == null) {
			String msg = "The function \"" + name + "\" is not defined.";
			throw new RuntimeException(msg);
		}
		return function;
	}

	// This evaluates a function whose name matches the text
	// of a given AST tree node for a given value.
	private double evalFunction(CommonTree nameNode, double value) 
	{
		return getFunction(nameNode).getValue(value);
	}

  	// This retrieves the value of a variable from our variable Map
	// whose name matches the text of a given AST tree node.
	private double getVariable(CommonTree nameNode) 
	{
		String name = nameNode.getText();
		Double value = variableMap.get(name);
		if (value == null) {
			String msg = "The variable \"" + name + "\" is not set.";
			throw new RuntimeException(msg);
		}
		return value;
	}

  	// This just shortens the code for print calls.
	private static void out(Object obj) 
	{
		System.out.print(obj);
	}

	// This just shortens the code for println calls.
	private static void outln(Object obj) 
	{
		System.out.println(obj);
	}

  	// This converts the text of a given AST node to a double.
	private double toDouble(CommonTree node) 
	{
		double value = 0.0;
		String text = node.getText();
		try {
			value = Double.parseDouble(text);
		} catch (NumberFormatException e) {
			throw new RuntimeException("Cannot convert \"" + text + "\" to a double.");
		}
		return value;
	}

	// This replaces all escaped newline characters in a String
	// with unescaped newline characters.
	// It is used to allow newline characters to be placed in
	// literal Strings that are passed to the print command.
	private static String unescape(String text) 
	{
		return text.replaceAll("\\\\n", "\n");
	}
}